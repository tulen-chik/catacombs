<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QNet</name>
    </assembly>
    <members>
        <member name="P:QNetLib.AndroidClient.Connection">
            <summary>
            클라이언트의 소켓정보
            </summary>
        </member>
        <member name="M:QNetLib.AndroidClient.#ctor(System.String,System.Int32)">
            <summary>
            안드로이드용 클라이언트 클래스 생성자
            </summary>
            <param name="address">서버주소</param>
            <param name="port">서버포트번호</param>
        </member>
        <member name="M:QNetLib.AndroidClient.Start">
            <summary>
            클라이언트 시작 함수
            호출안할시 서버 동작안함!
            </summary>
        </member>
        <member name="M:QNetLib.AndroidClient.Close">
            <summary>
            클라이언트 종료함수
            </summary>
        </member>
        <member name="M:QNetLib.AndroidClient.isConnect">
            <summary>
            클라이언트 연결 성공여부
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.AndroidClient.SetPacketQueueState(System.Boolean)">
            <summary>
            송신된 데이터를 따로 저장하는 큐의 사용여부를 설정합니다.
            굳이 데이터를 저장할 필요가 없다면 'OnReceiveHandler'의 이벤트로 데이터를 받을것을 권장합니다.
            기본설정 : true
            </summary>
            <param name="state">사용여부</param>
        </member>
        <member name="M:QNetLib.AndroidClient.GetId">
            <summary>
            클라이언트의 아이디를 반환합니다
            </summary>
            <returns>클라이언트 아이디</returns>
        </member>
        <member name="M:QNetLib.AndroidClient.SetSpace(System.Int32)">
            <summary>
            클라이언트의 스페이스를 설정합니다.
            </summary>
            <param name="space">스페이스 번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:QNetLib.AndroidClient.GetSpace">
            <summary>
            클라이언트의 스페이스 번호를 반환합니다.
            </summary>
            <returns>스페이스 번호</returns>
        </member>
        <member name="M:QNetLib.AndroidClient.OutSpace">
            <summary>
            클라이언트의 스페이스를 초기화 합니다.
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:QNetLib.AndroidClient.GetSpaceUserArray">
            <summary>
            클라이언트의 스페이스에 들어있는 모든 클라이언트의 아이디 배열을 반환합니다.
            </summary>
            <returns>아이디 배열</returns>
        </member>
        <member name="M:QNetLib.AndroidClient.Send(System.Int32,System.Byte[])">
            <summary>
            서버에 접속해 있는 다른 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id">송신할 아이디</param>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.AndroidClient.Send_unSafe(System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 다른 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id">송신할 아이디</param>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.AndroidClient.Send(System.Int32[],System.Byte[])">
            <summary>
            서버에 접속해 있는 다른 클라이언트들에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id">송신할 아이디 배열</param>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.AndroidClient.Send_unSafe(System.Int32[],System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 다른 클라이언트들에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.AndroidClient.SendToAll(System.Byte[])">
            <summary>
            서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.AndroidClient.SendToAll_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.AndroidClient.SendToSpace(System.Byte[])">
            <summary>
            같은 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.AndroidClient.SendToSpace_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 같은 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.AndroidClient.SendToServer(System.Byte[])">
            <summary>
            서버에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.AndroidClient.SendToServer_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.AndroidClient.Connect(System.String,System.Int32)">
            
            연결을 시도한다.
                   
        </member>
        <member name="M:QNetLib.AndroidClient.OnConnectCallback(System.IAsyncResult)">
            
            연결 요청 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.AndroidClient.receive">
            
            데이터 수신을 비동기적으로 처리
            
        </member>
        <member name="M:QNetLib.AndroidClient.OnReceiveCallBack(System.IAsyncResult)">
            
            데이터 수신 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.AndroidClient.send(System.Int32,System.Byte[])">
            
            데이터 송신을 비동기적으로 처리
            
        </member>
        <member name="M:QNetLib.AndroidClient.OnSendCallBack(System.IAsyncResult)">
            
            데이터 송신 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.AndroidClient.close">
            
            소켓 연결을 비동기적으로 종료
            
        </member>
        <member name="M:QNetLib.AndroidClient.OnCloseCallBack(System.IAsyncResult)">
            
            소켓 연결 종료를 처리하는 콜백 함수
            
        </member>
        <member name="T:QNetLib.AsyncSocketErrorEventArgs">
            
            비동기 소켓에서 발생한 에러 처리를 위한 이벤트 Argument Class
            
        </member>
        <member name="T:QNetLib.AsyncSocketConnectionEventArgs">
            
            비동기 소켓의 연결 및 연결해제 이벤트 처리를 위한 Argument Class
            
        </member>
        <member name="T:QNetLib.AsyncSocketReceiveEventArgs">
            
            비동기 소켓의 데이터 수신 이벤트 처리를 위한 Argument Class
            
        </member>
        <member name="T:QNetLib.AsyncSocketErrorEventHandler">
            
             delegate 정의
             
        </member>
        <member name="M:QNetLib.OnEventHandle.FindErrorCode(System.Exception)">
            <summary>
            입력된 'Excption'의 에러코드를 반환해줍니다.
            </summary>
            <param name="e">Exception</param>
            <returns></returns>
        </member>
        <member name="M:QNetLib.OnEventHandle.CompareErrorCode(System.Exception,System.Int32)">
            <summary>
            입력된 'Excption' 의 에러코드가 입력된 에러코드 번호와 일치하면 'true' 아니면 'false'를 반환합니다.
            </summary>
            <param name="e">Exception</param>
            <param name="ErrorCode">ErrorCode</param>
            <returns></returns>
        </member>
        <member name="P:QNetLib.BufferManager.buffer">
            <summary>
            저장된 모든 버퍼
            </summary>
        </member>
        <member name="M:QNetLib.BufferManager.#ctor">
            <summary>
            버퍼 읽기, 쓰기 기능 지원
            </summary>
        </member>
        <member name="M:QNetLib.BufferManager.#ctor(System.Byte[])">
            <summary>
            버퍼 읽기, 쓰기 기능 지원
            </summary>
            <param name="recv"></param>
        </member>
        <member name="M:QNetLib.BufferManager.ClearBuffer">
            <summary>
            버퍼를 초기화 합니다.
            </summary>
        </member>
        <member name="M:QNetLib.BufferManager.GetBuffer">
            <summary>
            읽고남은 버퍼를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Read(System.Boolean@)">
            <summary>
            out으로 입력된 데이터안에 데이터타입만큼 버퍼를 읽어 해당 데이터타입으로 변환하여 반환해줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="recv">Input byte array</param>
            <param name="data">Ouput data</param>
        </member>
        <member name="M:QNetLib.BufferManager.ReadToBoolean">
            <summary>
            'bool'타입만큼 버퍼를 읽어 'bool'형태로 데이터를 반환해 줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Read(System.Int32@)">
            <summary>
            out으로 입력된 데이터안에 데이터타입만큼 버퍼를 읽어 해당 데이터타입으로 변환하여 반환해줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.ReadToInt">
            <summary>
            'int'타입만큼 버퍼를 읽어 'int'형태로 데이터를 반환해 줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Read(System.Single@)">
            <summary>
            out으로 입력된 데이터안에 데이터타입만큼 버퍼를 읽어 해당 데이터타입으로 변환하여 반환해줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.ReadToFloat">
            <summary>
            'float'타입만큼 버퍼를 읽어 'float'형태로 데이터를 반환해 줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Read(System.Double@)">
            <summary>
            out으로 입력된 데이터안에 데이터타입만큼 버퍼를 읽어 해당 데이터타입으로 변환하여 반환해줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.ReadToDouble">
            <summary>
            'double'타입만큼 버퍼를 읽어 'double'형태로 데이터를 반환해 줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Read(System.String@,System.Int32)">
            <summary>
            out으로 입력된 데이터안에 데이터타입만큼 버퍼를 읽어 해당 데이터타입으로 변환하여 반환해줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="data"></param>
            <param name="strLength">읽을 데이터 길이</param>
        </member>
        <member name="M:QNetLib.BufferManager.ReadToString(System.Int32)">
            <summary>
            'string'타입만큼 버퍼를 읽어 'string'형태로 데이터를 반환해 줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="strLength">읽을 데이터 길이</param>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Read(System.Byte[]@,System.Int32)">
            <summary>
            out으로 입력된 데이터안에 데이터타입만큼 버퍼를 읽어 해당 데이터타입으로 변환하여 반환해줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="data"></param>
            <param name="byteLength">읽을 데이터 길이</param>
        </member>
        <member name="M:QNetLib.BufferManager.ReadToByteArray(System.Int32)">
            <summary>
            'byte[]'타입만큼 버퍼를 읽어 'byte[]'형태로 데이터를 반환해 줍니다.
            'Read' 함수들은 순차적으로 버퍼를 읽기 때문에 읽고난 이전데이터는 읽을수 없습니다.
            그렇다고 읽고난 앞에 남은 버퍼가 지워지는건 아닙니다!
            </summary>
            <param name="byteLength">읽을 데이터 길이</param>
            <returns></returns>
        </member>
        <member name="M:QNetLib.BufferManager.Write(System.Boolean)">
            <summary>
            이렵된 데이터를 바이트화 시켜 버퍼에 붙여줍니다.
            </summary>
            <param name="recv">Ouput byte array</param>
            <param name="data">Input data</param>
        </member>
        <member name="M:QNetLib.BufferManager.Write(System.Int32)">
            <summary>
            이렵된 데이터를 바이트화 시켜 버퍼에 붙여줍니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.Write(System.Single)">
            <summary>
            이렵된 데이터를 바이트화 시켜 버퍼에 붙여줍니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.Write(System.Double)">
            <summary>
            이렵된 데이터를 바이트화 시켜 버퍼에 붙여줍니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.Write(System.String)">
            <summary>
            이렵된 데이터를 바이트화 시켜 버퍼에 붙여줍니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QNetLib.BufferManager.Write(System.Byte[])">
            <summary>
            이렵된 데이터를 바이트화 시켜 버퍼에 붙여줍니다.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:QNetLib.Client.id">
            <summary>
            클라이언트의 아이디
            </summary>
        </member>
        <member name="P:QNetLib.Client.connection">
            <summary>
            클라이언트의 소켓정보
            </summary>
        </member>
        <member name="F:QNetLib.Client.packetQueue">
            <summary>
            클라이언트에 들어오는 패킷을 저장하는 큐
            </summary>
        </member>
        <member name="M:QNetLib.Client.#ctor(System.String,System.Int32)">
            <summary>
            클라이언트 클래스 생성자
            </summary>
            <param name="address">서버주소</param>
            <param name="port">서버포트번호</param>
        </member>
        <member name="M:QNetLib.Client.Start">
            <summary>
            클라이언트 시작 함수
            호출안할시 서버 동작안함!
            </summary>
        </member>
        <member name="M:QNetLib.Client.Close">
            <summary>
            클라이언트 종료함수
            </summary>
        </member>
        <member name="M:QNetLib.Client.isConnect">
            <summary>
            클라이언트 연결 성공여부
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.Client.SetPacketQueueState(System.Boolean)">
            <summary>
            송신된 데이터를 따로 저장하는 큐의 사용여부를 설정합니다.
            굳이 데이터를 저장할 필요가 없다면 'OnReceiveHandler'의 이벤트로 데이터를 받을것을 권장합니다.
            기본설정 : true
            </summary>
            <param name="state">사용여부</param>
        </member>
        <member name="M:QNetLib.Client.GetId">
            <summary>
            클라이언트의 아이디를 반환합니다
            </summary>
            <returns>클라이언트 아이디</returns>
        </member>
        <member name="M:QNetLib.Client.SetSpace(System.Int32)">
            <summary>
            클라이언트의 스페이스를 설정합니다.
            </summary>
            <param name="space">스페이스 번호</param>
            <returns>성공여부</returns>
        </member>
        <member name="M:QNetLib.Client.GetSpace">
            <summary>
            클라이언트의 스페이스 번호를 반환합니다.
            </summary>
            <returns>스페이스 번호</returns>
        </member>
        <member name="M:QNetLib.Client.OutSpace">
            <summary>
            클라이언트의 스페이스를 초기화 합니다.
            </summary>
            <returns>성공여부</returns>
        </member>
        <member name="M:QNetLib.Client.GetSpaceUserArray">
            <summary>
            클라이언트의 스페이스에 들어있는 모든 클라이언트의 아이디 배열을 반환합니다.
            </summary>
            <returns>아이디 배열</returns>
        </member>
        <member name="M:QNetLib.Client.Send(System.Int32,System.Byte[])">
            <summary>
            서버에 접속해 있는 다른 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id">송신할 아이디</param>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.Client.Send_unSafe(System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 다른 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id">송신할 아이디</param>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.Client.Send(System.Int32[],System.Byte[])">
            <summary>
            서버에 접속해 있는 다른 클라이언트들에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id">송신할 아이디 배열</param>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.Client.Send_unSafe(System.Int32[],System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 다른 클라이언트들에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.Client.SendToAll(System.Byte[])">
            <summary>
            서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.Client.SendToAll_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.Client.SendToSpace(System.Byte[])">
            <summary>
            같은 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.Client.SendToSpace_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 같은 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.Client.SendToServer(System.Byte[])">
            <summary>
            서버에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">송신 데이터</param>
        </member>
        <member name="M:QNetLib.Client.SendToServer_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QNetLib.Client.Connect(System.String,System.Int32)">
            
            연결을 시도한다.
                   
        </member>
        <member name="M:QNetLib.Client.OnConnectCallback(System.IAsyncResult)">
            
            연결 요청 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.Client.receive">
            
            데이터 수신을 비동기적으로 처리
            
        </member>
        <member name="M:QNetLib.Client.OnReceiveCallBack(System.IAsyncResult)">
            
            데이터 수신 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.Client.send(System.Int32,System.Byte[])">
            
            데이터 송신을 비동기적으로 처리
            
        </member>
        <member name="M:QNetLib.Client.OnSendCallBack(System.IAsyncResult)">
            
            데이터 송신 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.Client.close">
            
            소켓 연결을 비동기적으로 종료
            
        </member>
        <member name="M:QNetLib.Client.OnCloseCallBack(System.IAsyncResult)">
            
            소켓 연결 종료를 처리하는 콜백 함수
            
        </member>
        <member name="T:QNetLib.PacketQueue.Packet">
            <summary>
            패킷 저장 정보
            </summary>
        </member>
        <member name="P:QNetLib.PacketQueue.Count">
            <summary>
            패킷 갯수
            </summary>
        </member>
        <member name="M:QNetLib.PacketQueue.#ctor">
            <summary>
            패킷큐를 생성합니다.
            </summary>
        </member>
        <member name="M:QNetLib.PacketQueue.Clear">
            <summary>
            패킷큐에 담겨있는 모든 데이터를 초기화 합니다.
            </summary>
        </member>
        <member name="M:QNetLib.PacketQueue.Enqueue(System.Int32,QNetLib.BufferManager,System.Int32)">
            <summary>
            패킷큐의 맨뒤에 데이터를 추가합니다.
            </summary>
            <param name="id">송신자 아이디</param>
            <param name="data">BufferManager 클래스</param>
            <param name="size">데이터 크기</param>
        </member>
        <member name="M:QNetLib.PacketQueue.Dequeue">
            <summary>
            패킷큐에 들어있는 맨앞의 데이터를 꺼냅니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.PacketQueue.GetPacketCount">
            <summary>
            패킷 갯수를 반환합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="P:QNetLib.Server.port">
            <summary>
            서버의 포트번호
            </summary>
        </member>
        <member name="P:QNetLib.Server.listener">
            <summary>
            서버소켓정보
            </summary>
        </member>
        <member name="F:QNetLib.Server.clientList">
            <summary>
            접속한 유저의 정보를 담고 있는 리스트
            </summary>
        </member>
        <member name="F:QNetLib.Server.packetQueue">
            <summary>
            서버에 들어오는 패킷을 저장하는 큐
            </summary>
        </member>
        <member name="M:QNetLib.Server.#ctor(System.Int32,System.Int32)">
            <summary>
            서버클래스 생성자
            서버는 포트를 두개사용합니다.
            입력된 'port'와 'port+1'의 포트를 사용합니다.
            두개의 포트번호를 포트포워딩해주시기 바랍니다.
            </summary>
            <param name="port">포트번호 'port+1' 번까지 사용</param>
            <param name="maxConnetSize">최대 접속할 수 있는 인원</param>
        </member>
        <member name="M:QNetLib.Server.Start">
            <summary>
            서버 시작함수.
            호출안할시 서버 동작안함!
            </summary>
        </member>
        <member name="M:QNetLib.Server.Stop">
            <summary>
            서버 종료함수.
            </summary>
        </member>
        <member name="M:QNetLib.Server.SetPacketQueueState(System.Boolean)">
            <summary>
            송신된 데이터를 따로 저장하는 큐의 사용여부를 설정합니다.
            굳이 데이터를 저장할 필요가 없다면 'OnReceiveHandler'의 이벤트로 데이터를 받을것을 권장합니다.
            기본설정 : false
            </summary>
            <param name="state">사용여부</param>
        </member>
        <member name="M:QNetLib.Server.GetClientCount">
            <summary>
            접속한 클라이언트의 갯수를 반환
            </summary>
            <returns>클라이언트 갯수</returns>
        </member>
        <member name="M:QNetLib.Server.CreateSpace(System.Int32)">
            <summary>
            스페이스 생성
            스페이스 사용시 호출
            </summary>
            <param name="size">만들 스페이스 갯수</param>
        </member>
        <member name="M:QNetLib.Server.CreateSpace(System.Int32,System.Boolean)">
            <summary>
            스페이스 생성
            스페이스 사용시 호출
            </summary>
            <param name="size">만들 스페이스 갯수</param>
            <param name="autoDelete">클라이언트가 접속종료시 자동으로 지울지 설정. 기본 true</param>
        </member>
        <member name="M:QNetLib.Server.GetSpaceCount">
            <summary>
            스페이스가 몇개 인지 반환
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.Server.GetSpaceArray">
            <summary>
            스페이스 전체 현황 반환
            </summary>
            <returns></returns>
        </member>
        <member name="M:QNetLib.Server.SetUserSpace(System.Int32,System.Int32)">
            <summary>
            해당 유저 스페이스 설정
            </summary>
            <param name="_UserId"></param>
            <param name="_Space"></param>
            <returns></returns>
        </member>
        <member name="M:QNetLib.Server.GetUserSpace(System.Int32)">
            <summary>
            해당 유저 스페이스 번호반환
            </summary>
            <param name="_UserId"></param>
            <returns></returns>
        </member>
        <member name="M:QNetLib.Server.OutUserSpace(System.Int32)">
            <summary>
            입력된 유저 스페이스 초기화
            </summary>
            <param name="_UserId"></param>
            <returns></returns>
        </member>
        <member name="M:QNetLib.Server.GetSpaceUserArray(System.Int32)">
            <summary>
            입력된 스페이스번호의 유저배열 반환
            </summary>
            <param name="_Space"></param>
            <returns>유저아이디 배열</returns>
        </member>
        <member name="M:QNetLib.Server.Send(System.Int32,System.Byte[])">
            <summary>
            입력된 아이디의 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send_unSafe(System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 입력된 아이디의 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send(System.Int32,System.Int32,System.Byte[])">
            <summary>
            입력된 아이디의 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send_unSafe(System.Int32,System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 입력된 아이디의 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send(System.Int32[],System.Byte[])">
            <summary>
            입력된 아이디배열의 모든클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send_unSafe(System.Int32[],System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 입력된 아이디배열의 모든클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send(System.Int32,System.Int32[],System.Byte[])">
            <summary>
            입력된 아이디배열의 모든클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.Send_unSafe(System.Int32,System.Int32[],System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 입력된 아이디배열의 모든클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="To">받을 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToAll(System.Byte[])">
            <summary>
            서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToAll_unSafe(System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToAll(System.Int32,System.Byte[])">
            <summary>
            서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToAll_unSafe(System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 서버에 접속해 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToSpace(System.Int32,System.Byte[])">
            <summary>
            해당 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="space">스페이스 번호</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToSpace_unSafe(System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 해당 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="space">스페이스 번호</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToSpace(System.Int32,System.Int32,System.Byte[])">
            <summary>
            해당 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="space">스페이스 번호</param>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.SendToSpace_unSafe(System.Int32,System.Int32,System.Byte[])">
            <summary>
            안전하지 않지만 빠른전송속도로 해당 스페이스에 있는 모든 클라이언트에게 데이터를 보냅니다.
            아이디에 절대 음수를 넣지 마세요!!
            </summary>
            <param name="space">스페이스 번호</param>
            <param name="From">보내는 클라이언트 아이디</param>
            <param name="buffer">데이터</param>
        </member>
        <member name="M:QNetLib.Server.StartAccept">
            
            Client의 접속을 비동기적으로 대기한다.
                   
        </member>
        <member name="M:QNetLib.Server.OnListenCallBack(System.IAsyncResult)">
            
            Client의 비동기 접속을 처리한다.
                     
        </member>
        <member name="M:QNetLib.Server.Close(QNetLib.StateObject)">
            
            소켓 연결을 비동기적으로 종료
            
        </member>
        <member name="M:QNetLib.Server.OnCloseCallBack(System.IAsyncResult)">
            
            소켓 연결 종료를 처리하는 콜백 함수
            
        </member>
        <member name="M:QNetLib.Server.OnReceiveCallBack(System.IAsyncResult)">
            
            데이터 수신 처리 콜백 함수
            
        </member>
        <member name="M:QNetLib.Server.send(System.Int32,System.Int32,System.Byte[])">
            
            데이터 송신을 비동기적으로 처리
            
        </member>
        <member name="M:QNetLib.Server.OnSendCallBack(System.IAsyncResult)">
            
            데이터 송신 처리 콜백 함수
            
        </member>
    </members>
</doc>
